## Colors
RED='\e[1;31m%s\e[0m'
GREEN='\e[1;32m%s\e[0m\n'
YELLOW='\e[1;33m%s\e[0m\n'
BLUE='\e[1;34m%s\e[0m\n'
MAGNETO='\e[1;35m%s\e[0m\n'
CYAN='\e[1;36m%s\e[0m\n'
WHITE='\e[1;37m%s\e[0m\n'

# Paths
find_and_set_repo_home() {
    local target_folder="digitalis-plutus"

    local repo_path
    repo_path=$(find /home -type d -name "$target_folder" -not -path '*/\.*' -print -quit 2>/dev/null)

    if [ -n "$repo_path" ]; then
        echo "$repo_path"
    else
        echo "$target_folder not found."
        exit
    fi
}

REPO_HOME=$(find_and_set_repo_home)
DIST_PATH="${REPO_HOME}/dist"
UTILS_PATH="${REPO_HOME}/utils"
SCRIPTS_PATH="${UTILS_PATH}/scripts"
GENERAL_SCRIPTS_PATH="${SCRIPTS_PATH}/general_scripts"
DIGITALIS_PLATFORM_SCRIPTS_PATH="${SCRIPTS_PATH}/digitalis_platform_scripts"
DATA_PATH="${DIST_PATH}/data"
BUILD_PATH="${DIST_PATH}/build"
DIGITALIS_BUILD_PATH="${BUILD_PATH}/digitalis"
DIGITALIS_CONTRACTS_PATH="${DIGITALIS_BUILD_PATH}/contracts"
DIGITALIS_SH_PATH="${DIGITALIS_BUILD_PATH}/scripts_hashes"
DIGITALIS_DATA_PATH="${DATA_PATH}/digitalis"
DIGITALIS_DATUMS_PATH="${DIGITALIS_DATA_PATH}/datums"
DIGITALIS_REDEEMERS_PATH="${DIGITALIS_DATA_PATH}/redeemers"
DIGITALIS_CORES_PATH="${DIGITALIS_DATA_PATH}/cores"
DIGITALIS_TX_PATH="${DIGITALIS_DATA_PATH}/transactions"
WALLETS_PATH="${UTILS_PATH}/wallets"

# Variables

## Contracts Info

## Contracts Info
GENERAL="General"
BMAT_CONTRACT_NAME="BMAT"
BMAT_1_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_1"
BMAT_2_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_2"
BMAT_3_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_3"
BMAT_4_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_4"
BMAT_5_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_5"
BMAT_6_CONTRACT_NAME="${BMAT_CONTRACT_NAME}_6"

CAT_CONTRACT_NAME="CAT"
CONTRACTS_CONTROLLER_CONTRACT_NAME="ContractsController"

DNS_REFERENCE_CONTRACT_NAME="DNSReference"
DRAT_CONTRACT_NAME="DRAT"
DNS_MINTER_CONTRACT_NAME="DNSMinter"

MINTING_DNS_AUCTION_CONTRACT_NAME="MintingDNSAuction"
MHABAT_CONTRACT_NAME="MHABAT"
VICKREY_AUCTION_CONTRACT_NAME="VickreyAuction"
VABAT_CONTRACT_NAME="VABAT"
ENGLISH_AUCTION_CONTRACT_NAME="EnglishAuction"

MAIN_TREASURY_CONTRACT_NAME="MainTreasury"

STAKING_CONTRACT_NAME="Staking"

## Wallets Info
DIGITALIS_BOARD_MEMBERS_WALLETS="digitalis_board_members_wallets"

DIGITALIS_BOARD_MEMBER_1="digitalis_board_member_1"
DIGITALIS_BOARD_MEMBER_1_FIRST_WALLET="${DIGITALIS_BOARD_MEMBER_1}_first_wallet"
DIGITALIS_BOARD_MEMBER_1_SECOND_WALLET="${DIGITALIS_BOARD_MEMBER_1}_second_wallet"
DIGITALIS_BOARD_MEMBER_1_THIRD_WALLET="${DIGITALIS_BOARD_MEMBER_1}_third_wallet"

DIGITALIS_BOARD_MEMBER_2="digitalis_board_member_2"
DIGITALIS_BOARD_MEMBER_2_FIRST_WALLET="${DIGITALIS_BOARD_MEMBER_2}_first_wallet"
DIGITALIS_BOARD_MEMBER_2_SECOND_WALLET="${DIGITALIS_BOARD_MEMBER_2}_second_wallet"
DIGITALIS_BOARD_MEMBER_2_THIRD_WALLET="${DIGITALIS_BOARD_MEMBER_2}_third_wallet"

DIGITALIS_BOARD_MEMBER_3="digitalis_board_member_3"
DIGITALIS_BOARD_MEMBER_3_FIRST_WALLET="${DIGITALIS_BOARD_MEMBER_3}_first_wallet"
DIGITALIS_BOARD_MEMBER_3_SECOND_WALLET="${DIGITALIS_BOARD_MEMBER_3}_second_wallet"
DIGITALIS_BOARD_MEMBER_3_THIRD_WALLET="${DIGITALIS_BOARD_MEMBER_3}_third_wallet"

DIGITALIS_BOARD_MEMBER_4="digitalis_board_member_4"
DIGITALIS_BOARD_MEMBER_4_FIRST_WALLET="${DIGITALIS_BOARD_MEMBER_4}_first_wallet"
DIGITALIS_BOARD_MEMBER_4_SECOND_WALLET="${DIGITALIS_BOARD_MEMBER_4}_second_wallet"
DIGITALIS_BOARD_MEMBER_4_THIRD_WALLET="${DIGITALIS_BOARD_MEMBER_4}_third_wallet"

CORE_TEAM_MEMBERS_WALLETS="core_team_members_wallets"

CORE_TEAM_MEMBER_1="core_team_member_1"
CORE_TEAM_MEMBER_1_FIRST_WALLET="${CORE_TEAM_MEMBER_1}_first_wallet"
CORE_TEAM_MEMBER_1_SECOND_WALLET="${CORE_TEAM_MEMBER_1}_second_wallet"
CORE_TEAM_MEMBER_1_THIRD_WALLET="${CORE_TEAM_MEMBER_1}_third_wallet"

CORE_TEAM_MEMBER_2="core_team_member_2"
CORE_TEAM_MEMBER_2_FIRST_WALLET="${CORE_TEAM_MEMBER_2}_first_wallet"
CORE_TEAM_MEMBER_2_SECOND_WALLET="${CORE_TEAM_MEMBER_2}_second_wallet"
CORE_TEAM_MEMBER_2_THIRD_WALLET="${CORE_TEAM_MEMBER_2}_third_wallet"

TREASURY_SECTOR="treasury_sector"
TREASURER="treasurer"
TREASURY_BOARD_MEMBER_1="treasury_board_member_1"
TREASURY_BOARD_MEMBER_2="treasury_board_member_2"
TREASURY_BOARD_MEMBER_3="treasury_board_member_3"

DNS_SECTOR="dns_sector"
DNS_ADMIN_1="dns_admin_1"
DNS_ADMIN_2="dns_admin_2"

MARKETPLACE_SECTOR="marketplace_sector"
MARKETPLACE_ADMIN_1="marketplace_admin_1"
MARKETPLACE_ADMIN_2="marketplace_admin_2"

USERS_PATH="${WALLETS_PATH}/users"
USER_1="user_1"
USER_2="user_2"
USER_3="user_3"
USER_4="user_4"
USER_5="user_5"
USER_6="user_6"
USER_7="user_7"

USER_ARRAY=("$USER_1" "$USER_2" "$USER_3" "$USER_4" "$USER_5" "$USER_6" "$USER_7")

DIGITALIS_WALLET="digitalis_wallet"
COLLATERAL="collateral"
DEBUGGER="debugger"

## Other Info
MAGIC_TESTNET_NUMBER="1"

POOL_ID="ff9d774cc7e3e85ec1827bfd68c475bc611a9e288e7c9e1fb159fce52d2703fd"

# DOMAIN_NAME=".cardano"
# DOMAIN_NAME=".ada"
# DOMAIN_NAME=".hydra"

WRITE_VALIDATORS_SCRIPT_NAME="write_validators"
WRITE_DATUMS_SCRIPT_NAME="write_datums"
WRITE_REDEEMERS_SCRIPT_NAME="write_redeemers"

DNS_MINTING_FEE_TYPE="0"
DNS_AUCTION_BIDDING_FEE_TYPE="1"
DNS_AUCTION_FEE_TYPE="2"
AUCTION_FEE_TYPE="3"
STAKING_FEE_TYPE="4"

BIDDING_FEE=$((2 * 1000000))

PRECISION="10"
MIN_FEE=$((2 * 1000000))
FEE_PERCENTAGE="500" # 2%
TRADE_THRESHOLD=$((100 * 1000000))

MIN_UTXO=$((2 * 1000000))
BID_DIFF=$((1 * 1000000))
SEAT_COST=$((25 * 1000000))

FIRST_BID=$((80 * 1000000))
FIRST_SALT="MY_SECRET_SALT_1"
SECOND_BID=$((50 * 1000000))
SECOND_SALT="MY_SECRET_SALT_2"
THIRD_BID=$((80 * 1000000))
THIRD_SALT="MY_SECRET_SALT_3"
FORTH_BID=$((100 * 1000000))
FORTH_SALT="MY_SECRET_SALT_4"
FIFTH_BID=$((2 * 1000000))
FIFTH_SALT="MY_SECRET_SALT_5"
SIXTH_BID="8000001"
SIXTH_SALT="MY_SECRET_SALT_6"
SEVENTH_BID=$((1000 * 1000000))
SEVENTH_SALT="MY_SECRET_SALT_7"

# Helper Functions

check_process() {
    printf "$CYAN" "[$(date +%Y-%m-%d\ %H:%M:%S)] Checking If Process '$1' Exists..."
    [ "$1" = "" ] && return 0
    PROCESS_NUM=$(ps -ef | grep "$1" | grep -v "grep" | wc -l)
    if [ $PROCESS_NUM -eq 0 ]; then
        printf "\n$RED\n" "[-] ERROR: '$1' Is Not Running"
        echo ""
        exit 1
    fi
}

open_terminal_and_run_commands() {
    local commands_to_run="$@"
    gnome-terminal -- bash -c "$commands_to_run; exec bash"
}

checkAndCreateDir() {
    if [[ ! -d "$1" ]]; then
        mkdir "$1"
    fi
}

generate_cardano_wallet() {
    local WALLET_NAME="$1"

    cardano-cli address key-gen \
        --verification-key-file "$WALLET_NAME".Payment.vkey \
        --signing-key-file "$WALLET_NAME".Payment.skey

    cardano-cli address key-hash \
        --payment-verification-key-file "$WALLET_NAME".Payment.vkey \
        --out-file "$WALLET_NAME".Payment.pkh

    cardano-cli address build \
        --payment-verification-key-file "$WALLET_NAME".Payment.vkey \
        --testnet-magic "$MAGIC_TESTNET_NUMBER" \
        --out-file "$WALLET_NAME".TestnetPayment.addr

    cardano-cli stake-address key-gen \
        --signing-key-file "$WALLET_NAME".Stake.skey \
        --verification-key-file "$WALLET_NAME".Stake.vkey

    cardano-cli stake-address key-hash \
        --stake-verification-key-file "$WALLET_NAME".Stake.vkey \
        --out-file "$WALLET_NAME".Stake.pkh

    cardano-cli stake-address build \
        --stake-verification-key-file "$WALLET_NAME".Stake.vkey \
        --testnet-magic "$MAGIC_TESTNET_NUMBER" \
        --out-file "$WALLET_NAME".TestnetStake.addr

    cardano-cli address build \
        --payment-verification-key-file "$WALLET_NAME".Payment.vkey \
        --stake-verification-key-file "$WALLET_NAME".Stake.vkey \
        --testnet-magic "$MAGIC_TESTNET_NUMBER" \
        --out-file "$WALLET_NAME".TestnetDelegation.addr
}

generate_cardano_wallet_2() {
    local WALLET_NAME="$1"

    cardano-address recovery-phrase generate --size 15 |
        tee "$WALLET_NAME".PrivateRecoveryPhrase.txt |
        cardano-address key from-recovery-phrase Shelley |
        tee "$WALLET_NAME".Root.skey |
        cardano-address key child 1852H/1815H/0H/0/0 |
        tee "$WALLET_NAME".PrivatePaymentAddress.skey |
        cardano-address key public --with-chain-code |
        tee "$WALLET_NAME".PublicPaymentAddress.vkey |
        cardano-address address payment --network-tag preprod \
            >"$WALLET_NAME".TestnetPayment.addr

    cardano-cli key convert-cardano-address-key --shelley-payment-key \
        --signing-key-file "$WALLET_NAME".PrivatePaymentAddress.skey \
        --out-file "$WALLET_NAME".Payment.skey

    cardano-cli key verification-key \
        --signing-key-file "$WALLET_NAME".Payment.skey \
        --verification-key-file "$WALLET_NAME".Payment.vkey

    cardano-cli address key-hash \
        --payment-verification-key-file "$WALLET_NAME".Payment.vkey \
        --out-file "$WALLET_NAME".Payment.pkh

    cardano-address key child 1852H/1815H/0H/2/0 \
        <"$WALLET_NAME".Root.skey |
        tee "$WALLET_NAME".PrivateStakeAddress.skey |
        cardano-address key public --with-chain-code |
        tee "$WALLET_NAME".PublicStakeAddress.vkey |
        cardano-address address stake --network-tag preprod \
            >"$WALLET_NAME".TestnetStake.addr

    cardano-cli key convert-cardano-address-key --shelley-stake-key \
        --signing-key-file "$WALLET_NAME".PrivateStakeAddress.skey \
        --out-file "$WALLET_NAME".Stake.skey

    cardano-cli key verification-key \
        --signing-key-file "$WALLET_NAME".Stake.skey \
        --verification-key-file "$WALLET_NAME".Stake.vkey

    cardano-address key hash --hex \
        <"$WALLET_NAME".PublicStakeAddress.vkey \
        >"$WALLET_NAME".Stake.pkh

    cardano-address address delegation "$(cat "$WALLET_NAME".PublicStakeAddress.vkey)" \
        <"$WALLET_NAME".TestnetPayment.addr \
        >"$WALLET_NAME".TestnetDelegation.addr
}

checkAndCreateWallet() {
    if [[ ! -d "$1" ]]; then
        printf "\n$RED\n" "[-] ERROR: '$1' directory does not exist"
        echo ""
        exit 1
    fi
    cd "$1"
    if [[ ! -f "$1".Payment.vkey ]]; then
        generate_cardano_wallet_2 "$1"
    fi
    cd ..
}

getWalletMnemonic() {
    local NAME="$1"

    local FOLDER_PATH=$(find "$WALLETS_PATH" -type d -name "$NAME" | head -n 1)

    if [ -z "$FOLDER_PATH" ]; then
        echo "No folder found with the name '$NAME' within '$WALLETS_PATH'."
        return 1
    fi

    local FILE_PATH=$(find "$FOLDER_PATH" -type f -iname "*.PrivateRecoveryPhrase.txt" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '.PrivateRecoveryPhrase.txt' file found in folder '$FOLDER_PATH'."
        return 1
    fi

    cat "$FILE_PATH"
}

getWalletAddr() {
    local NAME="$1"

    local FOLDER_PATH=$(find "$WALLETS_PATH" -type d -name "$NAME" | head -n 1)

    if [ -z "$FOLDER_PATH" ]; then
        echo "No folder found with the name '$NAME' within '$WALLETS_PATH'."
        return 1
    fi

    local FILE_PATH=$(find "$FOLDER_PATH" -type f -iname "*.TestnetDelegation.addr" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '.addr' file found in folder '$FOLDER_PATH'."
        return 1
    fi

    cat "$FILE_PATH"
}

getWalletPaymentPKH() {
    local NAME="$1"

    local FOLDER_PATH=$(find "$WALLETS_PATH" -type d -name "$NAME" | head -n 1)

    if [ -z "$FOLDER_PATH" ]; then
        echo "No folder found with the name '$NAME' within '$WALLETS_PATH'."
        return 1
    fi

    local FILE_PATH=$(find "$FOLDER_PATH" -type f -iname "*.Payment.pkh" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '.Payment.pkh' file found in folder '$FOLDER_PATH'."
        return 1
    fi

    cat "$FILE_PATH"
}

getWalletPaymentSkey() {
    local NAME="$1"

    local FOLDER_PATH=$(find "$WALLETS_PATH" -type d -name "$NAME" | head -n 1)

    if [ -z "$FOLDER_PATH" ]; then
        echo "No folder found with the name '$NAME' within '$WALLETS_PATH'."
        return 1
    fi

    local FILE_PATH=$(find "$FOLDER_PATH" -type f -iname "*.Payment.skey" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '.Payment.skey' file found in folder '$FOLDER_PATH'."
        return 1
    fi

    echo "$FILE_PATH"
}

getWalletPaymentVkey() {
    local NAME="$1"

    local FOLDER_PATH=$(find "$WALLETS_PATH" -type d -name "$NAME" | head -n 1)

    if [ -z "$FOLDER_PATH" ]; then
        echo "No folder found with the name '$NAME' within '$WALLETS_PATH'."
        return 1
    fi

    local FILE_PATH=$(find "$FOLDER_PATH" -type f -iname "*.Payment.vkey" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '.Payment.vkey' file found in folder '$FOLDER_PATH'."
        return 1
    fi

    echo "$FILE_PATH"
}

getDigitalisContract() {
    local NAME="$1"

    local FILE_PATH="$DIGITALIS_CONTRACTS_PATH/$NAME.plutus"

    if [ -f "$FILE_PATH" ]; then
        echo "$FILE_PATH"
    else
        echo "No '$NAME.plutus' file found in folder '$DIGITALIS_CONTRACTS_PATH'."
        return 1
    fi
}

getTLDContract() {
    local NAME="$1"
    local DOMAIN_NAME="$2"

    local FILE_PATH="${BUILD_PATH}/$DOMAIN_NAME/contracts/$NAME.plutus"

    if [ -f "$FILE_PATH" ]; then
        echo "$FILE_PATH"
    else
        echo "No '$NAME.plutus' file found in folder '${BUILD_PATH}/$DOMAIN_NAME'."
        return 1
    fi
}

getDigitalisContractSH() {
    local NAME="$1"

    cardano-cli transaction policyid --script-file "$DIGITALIS_CONTRACTS_PATH"/"$NAME".plutus >"$DIGITALIS_SH_PATH"/"$NAME".vh

    cat "$DIGITALIS_SH_PATH"/"$NAME".vh
}

getTLDContractSH() {
    local NAME="$1"
    local DOMAIN_NAME="$2"

    cardano-cli transaction policyid --script-file "${BUILD_PATH}"/"$DOMAIN_NAME"/"contracts"/"$NAME".plutus >"${BUILD_PATH}"/"$DOMAIN_NAME"/"scripts_hashes"/"$NAME".vh

    cat "${BUILD_PATH}"/"$DOMAIN_NAME"/"scripts_hashes"/"$NAME".vh
}

getContractAddress() {
    local PAYMENT_CONTRACT="$1"
    local STAKE_CONTRACT="$2"

    local ADDR=$(cardano-cli address build --payment-script-file $PAYMENT_CONTRACT --stake-script-file $STAKE_CONTRACT --testnet-magic ${MAGIC_TESTNET_NUMBER})

    echo $ADDR
}

getStakeAddress() {
    local STAKE_CONTRACT="$1"

    local ADDR=$(cardano-cli stake-address build --stake-script-file $STAKE_CONTRACT --testnet-magic ${MAGIC_TESTNET_NUMBER})

    echo $ADDR
}

getDigitalisDatum() {
    local CONTRACT_NAME="$1"
    local DATUM_NAME="$2"

    local FILE_PATH=$(find "${DIGITALIS_DATUMS_PATH}/$CONTRACT_NAME" -type f -iname "$DATUM_NAME.json" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '$DATUM_NAME.json' file found in folder '${DIGITALIS_DATUMS_PATH}/$CONTRACT_NAME'."
        return 1
    fi

    echo "$FILE_PATH"
}

getTLDDatum() {
    local CONTRACT_NAME="$1"
    local DATUM_NAME="$2"
    local DOMAIN_NAME="$3"

    local FILE_PATH=$(find "${DATA_PATH}/${DOMAIN_NAME}/datums/$CONTRACT_NAME" -type f -iname "$DATUM_NAME.json" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '$DATUM_NAME.json' file found in folder '${DATA_PATH}/${DOMAIN_NAME}/datums/$CONTRACT_NAME'."
        return 1
    fi

    echo "$FILE_PATH"
}

getTLDRedeemer() {
    local CONTRACT_NAME="$1"
    local REDEEMER_NAME="$2"
    local DOMAIN_NAME="$3"

    local FILE_PATH=$(find "${DATA_PATH}/${DOMAIN_NAME}/redeemers/$CONTRACT_NAME" -type f -iname "$REDEEMER_NAME.json" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '$REDEEMER_NAME.json' file found in folder '${DATA_PATH}/${DOMAIN_NAME}/redeemers/$CONTRACT_NAME'."
        return 1
    fi

    echo "$FILE_PATH"
}

getDigitalisRedeemer() {
    local CONTRACT_NAME="$1"
    local REDEEMER_NAME="$2"

    local FILE_PATH=$(find "${DIGITALIS_REDEEMERS_PATH}/$CONTRACT_NAME" -type f -iname "$REDEEMER_NAME.json" | head -n 1)

    if [ -z "$FILE_PATH" ]; then
        echo "No '$REDEEMER_NAME.json' file found in folder '${DIGITALIS_REDEEMERS_PATH}/$CONTRACT_NAME'."
        return 1
    fi

    echo "$FILE_PATH"
}

get_digitalis_txID() {
    local NAME="$1"

    local FILE_PATH=$(find "$DIGITALIS_TX_PATH" -type f -iname "$NAME.signed" | head -n 1)

    if [ ! -f "$FILE_PATH" ]; then
        echo "Error: Transaction file '$NAME.signed' not found."
        exit 1
    fi

    local txID=$(cardano-cli transaction txid --tx-file "$FILE_PATH")

    if [ $? -ne 0 ]; then
        echo "Error: Failed to get transaction ID using cardano-cli."
        exit 1
    fi

    local UTxO="${txID}#0"
    echo "$UTxO"
}

get_tld_txID() {
    local NAME="$1"
    local DOMAIN_NAME="$2"

    local FILE_PATH=$(find "${DATA_PATH}/${DOMAIN_NAME}/transactions" -type f -iname "$NAME.signed" | head -n 1)

    if [ ! -f "$FILE_PATH" ]; then
        echo "Error: Transaction file '$NAME.signed' not found."
        exit 1
    fi

    local txID=$(cardano-cli transaction txid --tx-file "$FILE_PATH")

    if [ $? -ne 0 ]; then
        echo "Error: Failed to get transaction ID using cardano-cli."
        exit 1
    fi

    local UTxO="${txID}#0"
    echo "$UTxO"
}

get_address_biggest_lovelace() {
    local ADDRESS="$1"

    cardano-cli query utxo --address "$ADDRESS" --testnet-magic ${MAGIC_TESTNET_NUMBER} |
        tail -n +3 |
        awk '{printf "%s#%s %s \n", $1 , $2, $3}' |
        sort -rn -k2 |
        head -n1 |
        awk '{print $1}'
}

get_UTxO_by_token() {
    local ADDRESS="$1"
    local TOKEN="$2"

    local utxo_info
    utxo_info=$(cardano-cli query utxo --address "$ADDRESS" --testnet-magic "${MAGIC_TESTNET_NUMBER}" | tail -n +3)

    local utxo_entries
    IFS=$'\n' read -r -d '' -a utxo_entries <<<"$utxo_info"

    for entry in "${utxo_entries[@]}"; do
        entry_parts=($entry)
        utxo_hash=${entry_parts[0]}
        utxo_id=${entry_parts[1]}
        utxo_attached_token=${entry_parts[6]}

        if [[ $utxo_attached_token == "$TOKEN" ]]; then
            echo "$utxo_hash#$utxo_id"
            return 0
        fi
    done

    return 2
}

get_UTxO_lovelace_amount() {
    local ADDRESS="$1"
    local UTxO="$2"

    local utxo_info
    utxo_info=$(cardano-cli query utxo --address "$ADDRESS" --testnet-magic "${MAGIC_TESTNET_NUMBER}" | tail -n +3)

    local utxo_entries
    IFS=$'\n' read -r -d '' -a utxo_entries <<<"$utxo_info"

    for i in {1..10}; do
        for entry in "${utxo_entries[@]}"; do
            entry_parts=($entry)
            utxo_hash=${entry_parts[0]}
            utxo_id=${entry_parts[1]}

            if [[ "$utxo_hash#$utxo_id" == "$UTxO" ]]; then
                echo "${entry_parts[2]}"
                return 0
            fi
        done
    done

    return 1
}

get_current_slot_number() {
    cardano-cli query tip --testnet-magic ${MAGIC_TESTNET_NUMBER} |
        awk -v i="6" 'NR == i {printf("%s", $2)}' |
        cut -d ',' -f 1
}

get_current_POSIX_time() {
    local TIME=$(($(date +%s) * 1000))
    echo "$TIME"
}

# extract_values() {
#     local json="$1"

#     biddingDeadline=$(echo "$json" | jq -r '.[].inlineDatum.fields[2].int')
#     biddingDeadline_seconds=$((biddingDeadline / 1000))
#     biddingDeadline_human=$(date -d "@$biddingDeadline_seconds" "+%Y-%m-%d %H:%M:%S")

#     revealingDeadline=$(echo "$json" | jq -r '.[].inlineDatum.fields[3].int')
#     revealingDeadline_seconds=$((revealingDeadline / 1000))
#     revealingDeadline_human=$(date -d "@$revealingDeadline_seconds" "+%Y-%m-%d %H:%M:%S")

#     currentHighestBidder_PKH=$(echo "$json" | jq -r '.[].inlineDatum.fields[6].fields[0].fields[0].bytes')
#     currentHighestBidder=$(find_user_by_pkh $currentHighestBidder_PKH)

#     bid=$(echo "$json" | jq -r '.[].inlineDatum.fields[7].int')
#     bid_ada=$((bid / 1000000))

#     seatCost=$(echo "$json" | jq -r '.[].inlineDatum.fields[4].int')
#     seatCost_ada=$((seatCost / 1000000))

#     biddingFee=$(echo "$json" | jq -r '.[].inlineDatum.fields[5].int')
#     biddingFee_ada=$((biddingFee / 1000000))

#     # Construct a JSON object
#     echo "{
#         \"biddingDeadline\": $biddingDeadline,
#         \"biddingDeadline_human\": \"$biddingDeadline_human\",
#         \"revealingDeadline\": $revealingDeadline,
#         \"revealingDeadline_human\": \"$revealingDeadline_human\",
#         \"bid\": $bid,
#         \"bid_ada\": $bid_ada,
#         \"currentHighestBidder\": \"$currentHighestBidder\",
#         \"seatCost\": $seatCost,
#         \"seatCost_ada\": $seatCost_ada,
#         \"biddingFee\": $biddingFee,
#         \"biddingFee_ada\": $biddingFee_ada
#     }"
# }

extract_values() {
    local json="$1"

    biddingDeadline=$(echo "$json" | jq -r '.[].inlineDatum.fields[2].int')
    if [ -z "$biddingDeadline" ]; then
        echo "Error extracting biddingDeadline"
        exit 1
    fi
    biddingDeadline_seconds=$((biddingDeadline / 1000))
    biddingDeadline_human=$(date -d "@$biddingDeadline_seconds" "+%Y-%m-%d %H:%M:%S")

    revealingDeadline=$(echo "$json" | jq -r '.[].inlineDatum.fields[3].int')
    if [ -z "$revealingDeadline" ]; then
        echo "Error extracting revealingDeadline"
        exit 1
    fi
    revealingDeadline_seconds=$((revealingDeadline / 1000))
    revealingDeadline_human=$(date -d "@$revealingDeadline_seconds" "+%Y-%m-%d %H:%M:%S")

    currentHighestBidder_PKH=$(echo "$json" | jq -r '.[].inlineDatum.fields[6].fields[0].fields[0].bytes')
    if [ -z "$currentHighestBidder_PKH" ]; then
        echo "Error extracting currentHighestBidder_PKH"
        exit 1
    fi
    currentHighestBidder=$(find_user_by_pkh "$currentHighestBidder_PKH")

    bid=$(echo "$json" | jq -r '.[].inlineDatum.fields[7].int')
    if [ -z "$bid" ]; then
        echo "Error extracting bid"
        exit 1
    fi
    bid_ada=$((bid / 1000000))

    seatCost=$(echo "$json" | jq -r '.[].inlineDatum.fields[4].int')
    if [ -z "$seatCost" ]; then
        echo "Error extracting seatCost"
        exit 1
    fi
    seatCost_ada=$((seatCost / 1000000))

    biddingFee=$(echo "$json" | jq -r '.[].inlineDatum.fields[5].int')
    if [ -z "$biddingFee" ]; then
        echo "Error extracting biddingFee"
        exit 1
    fi
    biddingFee_ada=$((biddingFee / 1000000))

    # Construct a JSON object
    echo "{
        \"biddingDeadline\": $biddingDeadline,
        \"biddingDeadline_human\": \"$biddingDeadline_human\",
        \"revealingDeadline\": $revealingDeadline,
        \"revealingDeadline_human\": \"$revealingDeadline_human\",
        \"bid\": $bid,
        \"bid_ada\": $bid_ada,
        \"currentHighestBidder\": \"$currentHighestBidder\",
        \"seatCost\": $seatCost,
        \"seatCost_ada\": $seatCost_ada,
        \"biddingFee\": $biddingFee,
        \"biddingFee_ada\": $biddingFee_ada
    }"
}

find_user_by_pkh() {
    local pkh="$1"

    result=$(grep -rl "$pkh" "$USERS_PATH")

    if [ -n "$result" ]; then
        # Extract the directory name from the first file path
        folder_name=$(basename "$(dirname "$result" | head -n 1)")
        echo "$folder_name"
        exit 0
    else
        echo "String not found in any files."
        exit 1
    fi
}

selectUser() {
    local input="$1"

    if [[ $input -ge 1 && $input -le 7 ]]; then
        local userIndex=$((input - 1))

        local selectedUser="${USER_ARRAY[$userIndex]}"

        echo "$selectedUser"
    fi
}

find_utxo_by_txID_and_JSON() {
    local txID="$1"
    local json_file="$2"

    result=$(jq -r "{ \"$txID\": .[\"$txID\"] }" "$json_file")
    echo "$result"
}

find_utxo_by_txID() {
    local addr="$1"
    local txID="$2"
    local max_attempts=40

    for attempt in $(seq 1 $max_attempts); do
        local output="/tmp/utxos.json"
        cardano-cli query utxo --address "${addr}" --testnet-magic "$MAGIC_TESTNET_NUMBER" --out-file "$output"
        result=$(jq -r ".[\"$txID\"]" "$output")

        if [ "$result" == "null" ]; then
            if [ $attempt -eq $max_attempts ]; then
                rm "$output"
                echo "null"
            else
                printf "$WHITE%b" "[$(date +%Y-%m-%d\ %H:%M:%S)] (Attempts: $attempt/$max_attempts) UTxO not found at $addr: Retrying in 5 seconds..."
                rm "$output"
                sleep 5
            fi
        else
            result=$(jq -r "{ \"$txID\": .[\"$txID\"] }" "$output")
            echo -e "\033[1;32m[+] UTxO found at $addr:\033[0m" "$result"
            rm "$output"
            return 0
        fi
    done
}

create_config_file() {
    echo '{}' >"${REPO_HOME}"/config.json
}

add_ref_txid() {
    local contract_name="$1"
    local txID="$2"

    # Split the txID into two parts based on the '#' symbol
    local txID_parts
    IFS='#' read -r -a txID_parts <<<"$txID"
    local txID_part1="${txID_parts[0]}"
    local txID_part2="${txID_parts[1]}"

    # Check if the contract_name already exists in the JSON
    if jq -e --arg contract_name "$contract_name" 'has($contract_name)' "${REPO_HOME}"/config.json >/dev/null; then
        jq --arg contract_name "$contract_name" --arg txID_part1 "$txID_part1" --argjson txID_part2 "$txID_part2" \
            '.[$contract_name] += { "RefTxID": $txID_part1, "RefTxIDIndex": $txID_part2 }' \
            "${REPO_HOME}"/config.json >"${REPO_HOME}"/config.json.tmp
    else
        jq --arg contract_name "$contract_name" --arg txID_part1 "$txID_part1" --argjson txID_part2 "$txID_part2" \
            '. += { ($contract_name): { "RefTxID": $txID_part1, "RefTxIDIndex": $txID_part2 } }' \
            "${REPO_HOME}"/config.json >"${REPO_HOME}"/config.json.tmp
    fi

    mv "${REPO_HOME}"/config.json.tmp "${REPO_HOME}"/config.json
}

add_TLD_ref_txid() {
    local domain_name="$1"
    local contract_name="$2"
    local txID="$3"

    # Split the txID into two parts based on the '#' symbol
    local txID_parts
    IFS='#' read -r -a txID_parts <<<"$txID"
    local txID_part1="${txID_parts[0]}"
    local txID_part2="${txID_parts[1]}"

    # Check if the contract_name already exists under the domain_name in the JSON
    if jq -e --arg domain_name "$domain_name" --arg contract_name "$contract_name" \
        '.[$domain_name][$contract_name] != null' "${REPO_HOME}"/config.json >/dev/null; then
        jq --arg domain_name "$domain_name" --arg contract_name "$contract_name" \
            --arg txID_part1 "$txID_part1" --argjson txID_part2 "$txID_part2" \
            '.[$domain_name][$contract_name] |= . + { "RefTxID": $txID_part1, "RefTxIDIndex": $txID_part2 }' \
            "${REPO_HOME}"/config.json >"${REPO_HOME}"/config.json.tmp
    else
        jq --arg domain_name "$domain_name" --arg contract_name "$contract_name" \
            --arg txID_part1 "$txID_part1" --argjson txID_part2 "$txID_part2" \
            '.[$domain_name][$contract_name] = { "RefTxID": $txID_part1, "RefTxIDIndex": $txID_part2 }' \
            "${REPO_HOME}"/config.json >"${REPO_HOME}"/config.json.tmp
    fi

    mv "${REPO_HOME}"/config.json.tmp "${REPO_HOME}"/config.json
}

# echo -n b0470e0f87f779bcb0cba17ead81f27d0d4d29dbb97a7ed52ad6b75e | xxd -p | tr -d '\n'
# echo -n 3397609ac246ac638b78b497838c6aad00bcef416e5bdf3f3cb9aab3 | xxd -p | tr -d '\n'
# 62303437306530663837663737396263623063626131376561643831663237643064346432396462623937613765643532616436623735656464353837343764366132663638316635343931363834643037643431633735613233613431353963623830366339313936386337376633
